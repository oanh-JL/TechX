'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _i18nextXhrBackend = require('i18next-xhr-backend');

var _i18nextXhrBackend2 = _interopRequireDefault(_i18nextXhrBackend);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function ajax(url) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$init = _ref.init,
      init = _ref$init === undefined ? {} : _ref$init;

  var cb = arguments[2];

  fetch(url, init).then(function (res) {
    if (res.ok) {
      return res.text().then(function (json) {
        cb(json, res);
      });
    }

    return cb('', res);
  });
}

var FetchBackend = function (_XHRBackend) {
  _inherits(FetchBackend, _XHRBackend);

  function FetchBackend(services) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, FetchBackend);

    var options = Object.assign({ ajax: ajax }, opts);

    return _possibleConstructorReturn(this, (FetchBackend.__proto__ || Object.getPrototypeOf(FetchBackend)).call(this, services, options));
  }

  return FetchBackend;
}(_i18nextXhrBackend2.default);

exports.default = FetchBackend;